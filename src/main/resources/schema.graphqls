schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query{
    getAccount: Account
    #getPostsByFollowing: [Post]
    getAccountById(accountId: ID!): Account
    getPostById(postId: ID!): Post
    populateFeed(offsetDays: Int, numberOfDays: Int): [Post]
}

type Mutation{
    createAccount(account: AccountInput): Account
    signIn(authData: AuthData): SignInPayload
    addPost(post: PostInput): Post
    editPost(postId: ID, newTitle: String, newBody: String): Post
    deletePost(postId: ID): StatusPayload
    toggleLike(postId: ID): LikeResponse
    toggleFollow(followeeId: ID!): FollowResponse
}

type Subscription{
    newPost: Post
}

#Custom types

type User{
    id: ID!
    username: String!
    password: String!
    email: String!
}

type Account{
    id: ID!
    name: String!
    surname: String!
    bio: String
    #dateOfBirth: Date
    user: User!
    posts: [Post!]
    followers: [Account!]
    following: [Account!]
}

type Post{
    id: ID!
    title: String
    body: String!
    dateTimePosted: String!
    author: Account!
    numberOfLikes: Int
    likes: [Like]
}

type Like{
    id: ID!
    account: Account!
    post: Post!
}

type Follow{
    id: ID!
    follower: Account!
    followee: Account!
}

#input types
input UserInput{
    username: String!
    password: String!
    email: String!
}

input AccountInput{
    name: String!
    surname: String!
    bio: String
    #dateOfBirth: Date
    user: UserInput
}

input PostInput{
    title: String
    body: String!
    #Long timestamp sent as a string
    dateTimePosted: String!
    #authorId: ID!
}

input AuthData{
    username: String!
    password: String!
}

type SignInPayload{
    token: String!
    account: Account!
}

type StatusPayload{
    message: String!
    action: String!
    success: Boolean!
}

union LikeResponse = Like | StatusPayload
union FollowResponse = Follow | StatusPayload

#ideas
#stream of all of your followers' posts
#stream of all of your followers' followings

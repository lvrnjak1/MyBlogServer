schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query{
    getUsers: [User]
    #getAccounts: [Account]
    getAccount: Account
    #posts of all the people you follow
    getPostsByFollowing: [Post]
#    getLikes: [Like]
#    getFollowings: [Follow]
}

type Mutation{
    createAccount(account: AccountInput): Account
    signIn(authData: AuthData): SignInPayload
    addPost(post: PostInput): Post
    addLike(like: LikeInput): Like
    addFollowing(follow: FollowInput): Follow
}

type Subscription{
    newPost: Post
}

#Custom types

type User{
    id: ID!
    username: String!
    password: String!
    email: String!
}

type Account{
    id: ID!
    name: String!
    surname: String!
    bio: String
    #dateOfBirth: Date
    user: User!
    posts: [Post!]
    followers: [Account!]
    following: [Account!]
}

type Post{
    id: ID!
    title: String
    body: String!
    dateTimePosted: String!
    author: Account!
    likes: [Like]
}

type Like{
    id: ID!
    account: Account!
    post: Post!
}

type Follow{
    id: ID!
    follower: Account!
    followee: Account!
}

#input types
input UserInput{
    username: String!
    password: String!
    email: String!
}

input AccountInput{
    name: String!
    surname: String!
    bio: String
    #dateOfBirth: Date
    user: UserInput
}

input PostInput{
    title: String
    body: String!
    #Long timestamp sent as a string
    dateTimePosted: String!
    #authorId: ID!
}

input LikeInput{
    accountId: ID!
    postId: ID!
}

input FollowInput{
    followerId: ID!
    followeeId: ID!
}

input AuthData{
    username: String!
    password: String!
}

type SignInPayload{
    token: String!
    account: Account!
}
#ideas
#stream of all of your followers' posts
#stream of all of your followers' followings
